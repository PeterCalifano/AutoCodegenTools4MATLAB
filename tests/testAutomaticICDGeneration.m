close all
clear
clc

cd( fileparts(mfilename("fullpath")) );
addpath('..');
SetupPaths_AutoCodegenTools4MATLAB;

% Instantiate class
charInitScript = "testSampleInit.m"; % Init script or .mat to load
charModelName = "testSampleModel";
cellTargetSubsys = "testSampleModelRef";

return
%% test_CAutoGenICD_fromModel
% DEVNOTE: failing
objICDgenerator = CAutoGenICD( charModelName, cellTargetSubsys, charInitScript);

% Fetch data from model
run(charInitScript)
% eval(sprintf('%s([],[],[],''compile'');', charModelName));
% strModelData = objICDgenerator.getICDDataFromModel();
% eval(sprintf('%s([],[],[],''term'');', charModelName));

% Export document
% objICDgenerator.exportICD("enumOutFormat", "xlsx");

return
%% test_CAutoGenICD_fromBusObjects
load("test_data/gnc_buses_defs.mat");
tableICD_state_bus = CAutoGenICD.BuildTableFromBus(gnc_state_bus_architecture);
tableICD_data_bus = CAutoGenICD.BuildTableFromBus(gnc_data_input_bus_architecture);
tableICD_conf_bus = CAutoGenICD.BuildTableFromBus(gnc_configuration_bus_architecture);

% Apply templates
tableICD_state_bus = CAutoGenICD.ApplyTableTemplate(tableICD_state_bus ); % Use default order of fields
tableICD_data_bus  = CAutoGenICD.ApplyTableTemplate(tableICD_data_bus  ); % Use default order of fields
tableICD_conf_bus  = CAutoGenICD.ApplyTableTemplate(tableICD_conf_bus  ); % Use default order of fields

% Combine and export tables
charOutFile = fullfile("autogenerated_ICD", "rcs1_gnc_buses");
charOutFile = CAutoGenICD.ExportTablesToFile(charOutFile, ...
                                  {tableICD_state_bus, tableICD_data_bus, tableICD_conf_bus}, ...
                                  {"gnc_state_bus", "gnc_data_bus", "gnc_configuration_bus"}, ...
                                  "bOverwriteFile", true);

return
%% test_CAutoGenICD_fromBusDefinitionFiles
charPathToBusDef = "/home/peterc/devDir/dev-tools/AutoCodegenTools4MATLAB/tests/bus_autodefs/BusDef_testBus.m";
tableICD = CAutoGenICD.BuildTableFromBus(charPathToBusDef);

return







